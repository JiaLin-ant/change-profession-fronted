{"ast":null,"code":"var _jsxFileName = \"/Users/linjia/code/change-profession-fronted/src/contexts/JobContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jobsData } from '../data/jobsData';\nimport { jobsDataEn } from '../data/jobsDataEn';\nimport { useLanguage } from './LanguageContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobContext = /*#__PURE__*/createContext(undefined);\nexport const JobProvider = ({\n  children\n}) => {\n  _s();\n  const [selectedJob, setSelectedJobState] = useState(null);\n  const {\n    language\n  } = useLanguage();\n\n  // 根据当前语言选择职业数据\n  const currentJobsData = language === 'en' ? jobsDataEn : jobsData;\n\n  // 从URL获取职业ID\n  const getJobIdFromUrl = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('job');\n  };\n\n  // 设置URL中的职业ID\n  const setJobIdInUrl = jobId => {\n    const url = new URL(window.location.href);\n    url.searchParams.set('job', jobId);\n    window.history.pushState({}, '', url);\n  };\n\n  // 设置选中的职业\n  const setSelectedJob = job => {\n    console.log('Setting selected job in context:', job.title);\n    setSelectedJobState(job);\n    localStorage.setItem('selectedJobId', job.id);\n    setJobIdInUrl(job.id);\n  };\n\n  // 在组件加载时从URL或本地存储加载选择的职业ID，或使用默认职业\n  useEffect(() => {\n    // 首先尝试从URL获取职业ID\n    const urlJobId = getJobIdFromUrl();\n    // 然后尝试从localStorage获取职业ID\n    const savedJobId = localStorage.getItem('selectedJobId');\n    let jobToUse = null;\n    if (urlJobId) {\n      var _jobToUse;\n      // 如果URL中有职业ID，则使用它\n      jobToUse = currentJobsData.find(job => job.id === urlJobId) || null;\n      console.log('Using job from URL:', urlJobId, (_jobToUse = jobToUse) === null || _jobToUse === void 0 ? void 0 : _jobToUse.title);\n    } else if (savedJobId) {\n      var _jobToUse2;\n      // 如果localStorage中有职业ID，则使用它并更新URL\n      jobToUse = currentJobsData.find(job => job.id === savedJobId) || null;\n      console.log('Using job from localStorage:', savedJobId, (_jobToUse2 = jobToUse) === null || _jobToUse2 === void 0 ? void 0 : _jobToUse2.title);\n      if (jobToUse) {\n        setJobIdInUrl(jobToUse.id);\n      }\n    }\n\n    // 如果没有找到职业，则使用默认职业\n    if (!jobToUse) {\n      jobToUse = currentJobsData.find(job => job.id === \"programmer\") || currentJobsData[0];\n      console.log('Using default job:', jobToUse.title);\n      setJobIdInUrl(jobToUse.id);\n    }\n    setSelectedJobState(jobToUse);\n  }, [language, currentJobsData]);\n  return /*#__PURE__*/_jsxDEV(JobContext.Provider, {\n    value: {\n      selectedJob,\n      setSelectedJob,\n      availableJobs: currentJobsData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(JobProvider, \"GmUInI1QIwYlO1h7jPOn73kNh+Q=\", false, function () {\n  return [useLanguage];\n});\n_c = JobProvider;\nexport const useJob = () => {\n  _s2();\n  const context = useContext(JobContext);\n  if (context === undefined) {\n    throw new Error('useJob must be used within a JobProvider');\n  }\n  return context;\n};\n_s2(useJob, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"JobProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jobsData","jobsDataEn","useLanguage","jsxDEV","_jsxDEV","JobContext","undefined","JobProvider","children","_s","selectedJob","setSelectedJobState","language","currentJobsData","getJobIdFromUrl","urlParams","URLSearchParams","window","location","search","get","setJobIdInUrl","jobId","url","URL","href","searchParams","set","history","pushState","setSelectedJob","job","console","log","title","localStorage","setItem","id","urlJobId","savedJobId","getItem","jobToUse","_jobToUse","find","_jobToUse2","Provider","value","availableJobs","fileName","_jsxFileName","lineNumber","columnNumber","_c","useJob","_s2","context","Error","$RefreshReg$"],"sources":["/Users/linjia/code/change-profession-fronted/src/contexts/JobContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { Job } from '../types/types';\nimport { jobsData } from '../data/jobsData';\nimport { jobsDataEn } from '../data/jobsDataEn';\nimport { useLanguage } from './LanguageContext';\n\ninterface JobContextType {\n  selectedJob: Job | null;\n  setSelectedJob: (job: Job) => void;\n  availableJobs: Job[];\n}\n\nconst JobContext = createContext<JobContextType | undefined>(undefined);\n\nexport const JobProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [selectedJob, setSelectedJobState] = useState<Job | null>(null);\n  const { language } = useLanguage();\n  \n  // 根据当前语言选择职业数据\n  const currentJobsData = language === 'en' ? jobsDataEn : jobsData;\n  \n  // 从URL获取职业ID\n  const getJobIdFromUrl = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('job');\n  };\n  \n  // 设置URL中的职业ID\n  const setJobIdInUrl = (jobId: string) => {\n    const url = new URL(window.location.href);\n    url.searchParams.set('job', jobId);\n    window.history.pushState({}, '', url);\n  };\n  \n  // 设置选中的职业\n  const setSelectedJob = (job: Job) => {\n    console.log('Setting selected job in context:', job.title);\n    setSelectedJobState(job);\n    localStorage.setItem('selectedJobId', job.id);\n    setJobIdInUrl(job.id);\n  };\n  \n  // 在组件加载时从URL或本地存储加载选择的职业ID，或使用默认职业\n  useEffect(() => {\n    // 首先尝试从URL获取职业ID\n    const urlJobId = getJobIdFromUrl();\n    // 然后尝试从localStorage获取职业ID\n    const savedJobId = localStorage.getItem('selectedJobId');\n    \n    let jobToUse: Job | null = null;\n    \n    if (urlJobId) {\n      // 如果URL中有职业ID，则使用它\n      jobToUse = currentJobsData.find(job => job.id === urlJobId) || null;\n      console.log('Using job from URL:', urlJobId, jobToUse?.title);\n    } else if (savedJobId) {\n      // 如果localStorage中有职业ID，则使用它并更新URL\n      jobToUse = currentJobsData.find(job => job.id === savedJobId) || null;\n      console.log('Using job from localStorage:', savedJobId, jobToUse?.title);\n      if (jobToUse) {\n        setJobIdInUrl(jobToUse.id);\n      }\n    }\n    \n    // 如果没有找到职业，则使用默认职业\n    if (!jobToUse) {\n      jobToUse = currentJobsData.find(job => job.id === \"programmer\") || currentJobsData[0];\n      console.log('Using default job:', jobToUse.title);\n      setJobIdInUrl(jobToUse.id);\n    }\n    \n    setSelectedJobState(jobToUse);\n  }, [language, currentJobsData]);\n  \n  return (\n    <JobContext.Provider value={{ selectedJob, setSelectedJob, availableJobs: currentJobsData }}>\n      {children}\n    </JobContext.Provider>\n  );\n};\n\nexport const useJob = () => {\n  const context = useContext(JobContext);\n  if (context === undefined) {\n    throw new Error('useJob must be used within a JobProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}