{"ast":null,"code":"var _jsxFileName = \"/Users/linjia/code/change-profession-fronted/src/components/StarfieldBackground.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StarfieldBackground = ({\n  predictedYear\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const rendererRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const starsRef = useRef(null);\n\n  // 根据预测年份计算星星密度和速度\n  const {\n    starCount,\n    starSpeed\n  } = useMemo(() => {\n    const currentYear = new Date().getFullYear();\n    const yearDiff = predictedYear - currentYear;\n\n    // 近期预测(5年内)：密集星空，快速移动\n    // 远期预测(30年以上)：稀疏星空，缓慢移动\n    const density = yearDiff < 5 ? 2000 : yearDiff < 15 ? 1500 : yearDiff < 30 ? 1000 : 500;\n    const speed = yearDiff < 5 ? 0.03 : yearDiff < 15 ? 0.02 : yearDiff < 30 ? 0.01 : 0.005;\n    return {\n      starCount: density,\n      starSpeed: speed\n    };\n  }, [predictedYear]);\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // 初始化Three.js\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n\n    // 创建场景\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // 创建相机\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.z = 50;\n    cameraRef.current = camera;\n\n    // 创建渲染器\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    renderer.setSize(width, height);\n    renderer.setClearColor(0x000000, 0.1); // 半透明黑色背景\n    container.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // 创建星星\n    const starsGeometry = new THREE.BufferGeometry();\n    const starPositions = new Float32Array(starCount * 3);\n    const starSizes = new Float32Array(starCount);\n    const starColors = new Float32Array(starCount * 3);\n    for (let i = 0; i < starCount; i++) {\n      const i3 = i * 3;\n      // 随机位置\n      starPositions[i3] = (Math.random() - 0.5) * 200;\n      starPositions[i3 + 1] = (Math.random() - 0.5) * 200;\n      starPositions[i3 + 2] = (Math.random() - 0.5) * 200;\n\n      // 随机大小\n      starSizes[i] = Math.random() * 2;\n\n      // 颜色 - 根据预测年份调整\n      const yearDiff = predictedYear - new Date().getFullYear();\n      if (yearDiff < 5) {\n        // 近期预测：偏红色\n        starColors[i3] = 0.8 + Math.random() * 0.2; // R\n        starColors[i3 + 1] = 0.1 + Math.random() * 0.3; // G\n        starColors[i3 + 2] = 0.1 + Math.random() * 0.3; // B\n      } else if (yearDiff < 15) {\n        // 中期预测：偏黄色\n        starColors[i3] = 0.7 + Math.random() * 0.3; // R\n        starColors[i3 + 1] = 0.7 + Math.random() * 0.3; // G\n        starColors[i3 + 2] = 0.1 + Math.random() * 0.2; // B\n      } else {\n        // 远期预测：偏蓝色\n        starColors[i3] = 0.1 + Math.random() * 0.3; // R\n        starColors[i3 + 1] = 0.3 + Math.random() * 0.4; // G\n        starColors[i3 + 2] = 0.7 + Math.random() * 0.3; // B\n      }\n    }\n    starsGeometry.setAttribute('position', new THREE.BufferAttribute(starPositions, 3));\n    starsGeometry.setAttribute('size', new THREE.BufferAttribute(starSizes, 1));\n    starsGeometry.setAttribute('color', new THREE.BufferAttribute(starColors, 3));\n    const starsMaterial = new THREE.PointsMaterial({\n      size: 1,\n      transparent: true,\n      opacity: 0.8,\n      vertexColors: true,\n      sizeAttenuation: true,\n      blending: THREE.AdditiveBlending\n    });\n    const stars = new THREE.Points(starsGeometry, starsMaterial);\n    scene.add(stars);\n    starsRef.current = stars;\n\n    // 动画循环\n    let animationFrameId;\n    const animate = () => {\n      if (starsRef.current) {\n        // 旋转星空\n        starsRef.current.rotation.x += starSpeed * 0.1;\n        starsRef.current.rotation.y += starSpeed * 0.15;\n\n        // 移动星星 - 创建拖尾效果\n        const positions = starsRef.current.geometry.attributes.position.array;\n        for (let i = 0; i < starCount; i++) {\n          const i3 = i * 3;\n          positions[i3 + 2] += starSpeed * (Math.random() + 0.5);\n\n          // 如果星星移动到太远，重置位置\n          if (positions[i3 + 2] > 100) {\n            positions[i3 + 2] = -100;\n          }\n        }\n        starsRef.current.geometry.attributes.position.needsUpdate = true;\n      }\n      if (rendererRef.current && sceneRef.current && cameraRef.current) {\n        rendererRef.current.render(sceneRef.current, cameraRef.current);\n      }\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    animate();\n\n    // 清理函数\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n      if (rendererRef.current && container.contains(rendererRef.current.domElement)) {\n        container.removeChild(rendererRef.current.domElement);\n      }\n    };\n  }, [starCount, starSpeed, predictedYear]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      zIndex: -1,\n      pointerEvents: 'none'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(StarfieldBackground, \"1FRb4i7IHJYMMICC4VklW7UWcYc=\");\n_c = StarfieldBackground;\nexport default StarfieldBackground;\nvar _c;\n$RefreshReg$(_c, \"StarfieldBackground\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","THREE","jsxDEV","_jsxDEV","StarfieldBackground","predictedYear","_s","containerRef","rendererRef","sceneRef","cameraRef","starsRef","starCount","starSpeed","currentYear","Date","getFullYear","yearDiff","density","speed","current","container","width","clientWidth","height","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","alpha","setSize","setClearColor","appendChild","domElement","starsGeometry","BufferGeometry","starPositions","Float32Array","starSizes","starColors","i","i3","Math","random","setAttribute","BufferAttribute","starsMaterial","PointsMaterial","size","transparent","opacity","vertexColors","sizeAttenuation","blending","AdditiveBlending","stars","Points","add","animationFrameId","animate","rotation","x","y","positions","geometry","attributes","array","needsUpdate","render","requestAnimationFrame","cancelAnimationFrame","contains","removeChild","ref","style","top","left","zIndex","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/linjia/code/change-profession-fronted/src/components/StarfieldBackground.tsx"],"sourcesContent":["import React, { useEffect, useRef, useMemo } from 'react';\nimport * as THREE from 'three';\n\ninterface StarfieldBackgroundProps {\n  predictedYear: number;\n}\n\nconst StarfieldBackground: React.FC<StarfieldBackgroundProps> = ({ predictedYear }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n  const starsRef = useRef<THREE.Points | null>(null);\n  \n  // 根据预测年份计算星星密度和速度\n  const { starCount, starSpeed } = useMemo(() => {\n    const currentYear = new Date().getFullYear();\n    const yearDiff = predictedYear - currentYear;\n    \n    // 近期预测(5年内)：密集星空，快速移动\n    // 远期预测(30年以上)：稀疏星空，缓慢移动\n    const density = yearDiff < 5 ? 2000 : \n                   yearDiff < 15 ? 1500 :\n                   yearDiff < 30 ? 1000 : 500;\n                   \n    const speed = yearDiff < 5 ? 0.03 : \n                 yearDiff < 15 ? 0.02 :\n                 yearDiff < 30 ? 0.01 : 0.005;\n                 \n    return { starCount: density, starSpeed: speed };\n  }, [predictedYear]);\n  \n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    // 初始化Three.js\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n    \n    // 创建场景\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n    \n    // 创建相机\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.z = 50;\n    cameraRef.current = camera;\n    \n    // 创建渲染器\n    const renderer = new THREE.WebGLRenderer({ alpha: true });\n    renderer.setSize(width, height);\n    renderer.setClearColor(0x000000, 0.1); // 半透明黑色背景\n    container.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    \n    // 创建星星\n    const starsGeometry = new THREE.BufferGeometry();\n    const starPositions = new Float32Array(starCount * 3);\n    const starSizes = new Float32Array(starCount);\n    const starColors = new Float32Array(starCount * 3);\n    \n    for (let i = 0; i < starCount; i++) {\n      const i3 = i * 3;\n      // 随机位置\n      starPositions[i3] = (Math.random() - 0.5) * 200;\n      starPositions[i3 + 1] = (Math.random() - 0.5) * 200;\n      starPositions[i3 + 2] = (Math.random() - 0.5) * 200;\n      \n      // 随机大小\n      starSizes[i] = Math.random() * 2;\n      \n      // 颜色 - 根据预测年份调整\n      const yearDiff = predictedYear - new Date().getFullYear();\n      if (yearDiff < 5) {\n        // 近期预测：偏红色\n        starColors[i3] = 0.8 + Math.random() * 0.2; // R\n        starColors[i3 + 1] = 0.1 + Math.random() * 0.3; // G\n        starColors[i3 + 2] = 0.1 + Math.random() * 0.3; // B\n      } else if (yearDiff < 15) {\n        // 中期预测：偏黄色\n        starColors[i3] = 0.7 + Math.random() * 0.3; // R\n        starColors[i3 + 1] = 0.7 + Math.random() * 0.3; // G\n        starColors[i3 + 2] = 0.1 + Math.random() * 0.2; // B\n      } else {\n        // 远期预测：偏蓝色\n        starColors[i3] = 0.1 + Math.random() * 0.3; // R\n        starColors[i3 + 1] = 0.3 + Math.random() * 0.4; // G\n        starColors[i3 + 2] = 0.7 + Math.random() * 0.3; // B\n      }\n    }\n    \n    starsGeometry.setAttribute('position', new THREE.BufferAttribute(starPositions, 3));\n    starsGeometry.setAttribute('size', new THREE.BufferAttribute(starSizes, 1));\n    starsGeometry.setAttribute('color', new THREE.BufferAttribute(starColors, 3));\n    \n    const starsMaterial = new THREE.PointsMaterial({\n      size: 1,\n      transparent: true,\n      opacity: 0.8,\n      vertexColors: true,\n      sizeAttenuation: true,\n      blending: THREE.AdditiveBlending\n    });\n    \n    const stars = new THREE.Points(starsGeometry, starsMaterial);\n    scene.add(stars);\n    starsRef.current = stars;\n    \n    // 动画循环\n    let animationFrameId: number;\n    \n    const animate = () => {\n      if (starsRef.current) {\n        // 旋转星空\n        starsRef.current.rotation.x += starSpeed * 0.1;\n        starsRef.current.rotation.y += starSpeed * 0.15;\n        \n        // 移动星星 - 创建拖尾效果\n        const positions = starsRef.current.geometry.attributes.position.array as Float32Array;\n        for (let i = 0; i < starCount; i++) {\n          const i3 = i * 3;\n          positions[i3 + 2] += starSpeed * (Math.random() + 0.5);\n          \n          // 如果星星移动到太远，重置位置\n          if (positions[i3 + 2] > 100) {\n            positions[i3 + 2] = -100;\n          }\n        }\n        starsRef.current.geometry.attributes.position.needsUpdate = true;\n      }\n      \n      if (rendererRef.current && sceneRef.current && cameraRef.current) {\n        rendererRef.current.render(sceneRef.current, cameraRef.current);\n      }\n      \n      animationFrameId = requestAnimationFrame(animate);\n    };\n    \n    animate();\n    \n    // 清理函数\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n      if (rendererRef.current && container.contains(rendererRef.current.domElement)) {\n        container.removeChild(rendererRef.current.domElement);\n      }\n    };\n  }, [starCount, starSpeed, predictedYear]);\n  \n  return (\n    <div \n      ref={containerRef} \n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: -1,\n        pointerEvents: 'none'\n      }}\n    />\n  );\n};\n\nexport default StarfieldBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}