{"ast":null,"code":"var _jsxFileName = \"/Users/linjia/code/change-profession-fronted/src/contexts/LanguageContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { translations } from '../data/translations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext(undefined);\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s();\n  const [language, setLanguage] = useState('en'); // 默认英文\n\n  const t = key => {\n    return translations[language][key] || key;\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      setLanguage,\n      t\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageProvider, \"fVUtOCD1O58HgvMjnE8lxRQa0QA=\");\n_c = LanguageProvider;\nexport const useLanguage = () => {\n  _s2();\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n_s2(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","translations","jsxDEV","_jsxDEV","LanguageContext","undefined","LanguageProvider","children","_s","language","setLanguage","t","key","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLanguage","_s2","context","Error","$RefreshReg$"],"sources":["/Users/linjia/code/change-profession-fronted/src/contexts/LanguageContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react';\nimport { translations } from '../data/translations';\n\ntype Language = 'en' | 'zh';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [language, setLanguage] = useState<Language>('en'); // 默认英文\n\n  const t = (key: string): string => {\n    return translations[language][key] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguage = (): LanguageContextType => {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAmB,OAAO;AAC7E,SAASC,YAAY,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUpD,MAAMC,eAAe,gBAAGN,aAAa,CAAkCO,SAAS,CAAC;AAEjF,OAAO,MAAMC,gBAAmD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAW,IAAI,CAAC,CAAC,CAAC;;EAE1D,MAAMY,CAAC,GAAIC,GAAW,IAAa;IACjC,OAAOX,YAAY,CAACQ,QAAQ,CAAC,CAACG,GAAG,CAAC,IAAIA,GAAG;EAC3C,CAAC;EAED,oBACET,OAAA,CAACC,eAAe,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,QAAQ;MAAEC,WAAW;MAAEC;IAAE,CAAE;IAAAJ,QAAA,EAC3DA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACV,EAAA,CAZWF,gBAAmD;AAAAa,EAAA,GAAnDb,gBAAmD;AAchE,OAAO,MAAMc,WAAW,GAAGA,CAAA,KAA2B;EAAAC,GAAA;EACpD,MAAMC,OAAO,GAAGtB,UAAU,CAACI,eAAe,CAAC;EAC3C,IAAIkB,OAAO,KAAKjB,SAAS,EAAE;IACzB,MAAM,IAAIkB,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}