{"ast":null,"code":"var _jsxFileName = \"/Users/linjia/code/change-profession-fronted/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport JobSearch from './components/JobSearch';\nimport { jobsData } from './data/jobsData';\nimport { jobsDataEn } from './data/jobsDataEn';\nimport './App.css';\nimport JobDetails from './components/JobDetails';\nimport { LanguageProvider } from './contexts/LanguageContext';\nimport LanguageSwitcher from './components/LanguageSwitcher';\nimport { useLanguage } from './contexts/LanguageContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContent = () => {\n  _s();\n  const [selectedJob, setSelectedJob] = useState(null);\n  const {\n    t,\n    language\n  } = useLanguage();\n  const [hasUserSelected, setHasUserSelected] = useState(false);\n\n  // 根据当前语言选择职业数据\n  const currentJobsData = language === 'en' ? jobsDataEn : jobsData;\n\n  // 在组件加载时设置默认职业为\"程序员\"/\"Programmer\"\n  useEffect(() => {\n    // 只有在用户尚未选择职业时，才设置默认职业\n    if (!hasUserSelected) {\n      const defaultJob = currentJobsData.find(job => job.id === \"programmer\") || currentJobsData[0];\n      setSelectedJob(defaultJob);\n    } else if (selectedJob) {\n      // 如果用户已选择职业，则在语言切换时保持相同ID的职业\n      const jobId = selectedJob.id;\n      const newJob = currentJobsData.find(job => job.id === jobId);\n      if (newJob) {\n        setSelectedJob(newJob);\n      }\n    }\n  }, [language, currentJobsData, hasUserSelected, selectedJob]);\n\n  // 处理职业选择\n  const handleSelectJob = job => {\n    setSelectedJob(job);\n    setHasUserSelected(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(LanguageSwitcher, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: t('app.title')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: t('app.subtitle')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(JobSearch, {\n        onSelectJob: handleSelectJob,\n        initialJob: selectedJob\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), selectedJob && /*#__PURE__*/_jsxDEV(JobDetails, {\n        selectedJob: selectedJob\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(AppContent, \"lv2T35zN/3ToBQYt4JlGIc1HVco=\", false, function () {\n  return [useLanguage];\n});\n_c = AppContent;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(LanguageProvider, {\n    children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","JobSearch","jobsData","jobsDataEn","JobDetails","LanguageProvider","LanguageSwitcher","useLanguage","jsxDEV","_jsxDEV","AppContent","_s","selectedJob","setSelectedJob","t","language","hasUserSelected","setHasUserSelected","currentJobsData","defaultJob","find","job","id","jobId","newJob","handleSelectJob","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelectJob","initialJob","_c","App","_c2","$RefreshReg$"],"sources":["/Users/linjia/code/change-profession-fronted/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport JobSearch from './components/JobSearch';\nimport CountdownClock from './components/CountdownClock';\nimport ProbabilityMeter from './components/ProbabilityMeter';\nimport JobIcon3D from './components/JobIcon3D';\nimport Timeline from './components/Timeline';\nimport AdaptationStrategies from './components/AdaptationStrategies';\nimport StarfieldBackground from './components/StarfieldBackground';\nimport AlertOverlay from './components/AlertOverlay';\nimport { Job } from './types/types';\nimport { jobsData } from './data/jobsData';\nimport { jobsDataEn } from './data/jobsDataEn';\nimport './App.css';\nimport JobDetails from './components/JobDetails';\nimport { LanguageProvider } from './contexts/LanguageContext';\nimport LanguageSwitcher from './components/LanguageSwitcher';\nimport { useLanguage } from './contexts/LanguageContext';\n\nconst AppContent: React.FC = () => {\n  const [selectedJob, setSelectedJob] = useState<Job | null>(null);\n  const { t, language } = useLanguage();\n  const [hasUserSelected, setHasUserSelected] = useState(false);\n  \n  // 根据当前语言选择职业数据\n  const currentJobsData = language === 'en' ? jobsDataEn : jobsData;\n  \n  // 在组件加载时设置默认职业为\"程序员\"/\"Programmer\"\n  useEffect(() => {\n    // 只有在用户尚未选择职业时，才设置默认职业\n    if (!hasUserSelected) {\n      const defaultJob = currentJobsData.find(job => job.id === \"programmer\") || currentJobsData[0];\n      setSelectedJob(defaultJob);\n    } else if (selectedJob) {\n      // 如果用户已选择职业，则在语言切换时保持相同ID的职业\n      const jobId = selectedJob.id;\n      const newJob = currentJobsData.find(job => job.id === jobId);\n      if (newJob) {\n        setSelectedJob(newJob);\n      }\n    }\n  }, [language, currentJobsData, hasUserSelected, selectedJob]);\n  \n  // 处理职业选择\n  const handleSelectJob = (job: Job) => {\n    setSelectedJob(job);\n    setHasUserSelected(true);\n  };\n  \n  return (\n    <div className=\"app\">\n      <header>\n        <LanguageSwitcher />\n        <h1>{t('app.title')}</h1>\n        <p>{t('app.subtitle')}</p>\n      </header>\n      <main>\n        <JobSearch onSelectJob={handleSelectJob} initialJob={selectedJob} />\n        {selectedJob && <JobDetails selectedJob={selectedJob} />}\n      </main>\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <LanguageProvider>\n      <AppContent />\n    </LanguageProvider>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}