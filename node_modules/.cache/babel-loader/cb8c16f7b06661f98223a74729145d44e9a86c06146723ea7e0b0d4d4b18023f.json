{"ast":null,"code":"var _jsxFileName = \"/Users/linjia/code/change-profession-fronted/src/components/ProbabilityMeter.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport * as THREE from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 3D环形进度条组件\nconst RingProgress = ({\n  probability\n}) => {\n  _s();\n  const meshRef = useRef(null);\n  const materialRef = useRef(null);\n\n  // 创建自定义着色器材质\n  const shaderData = useMemo(() => {\n    return {\n      uniforms: {\n        time: {\n          value: 0\n        },\n        progress: {\n          value: probability / 100\n        },\n        color: {\n          value: new THREE.Color(getColorFromProbability(probability))\n        }\n      },\n      vertexShader: `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform float time;\n        uniform float progress;\n        uniform vec3 color;\n        varying vec2 vUv;\n        \n        void main() {\n          // 计算当前点到圆心的距离\n          vec2 center = vec2(0.5, 0.5);\n          float dist = distance(vUv, center);\n          \n          // 创建环形\n          float ring = smoothstep(0.3, 0.31, dist) * smoothstep(0.4, 0.39, dist);\n          \n          // 创建进度效果\n          float angle = atan(vUv.y - 0.5, vUv.x - 0.5);\n          angle = angle < 0.0 ? angle + 6.28318 : angle;\n          float progressAngle = progress * 6.28318;\n          float progressMask = step(angle, progressAngle);\n          \n          // 添加脉冲效果\n          float pulse = 0.5 + 0.5 * sin(time * 3.0 + dist * 10.0);\n          float glow = smoothstep(0.35, 0.36, dist) * smoothstep(0.38, 0.37, dist) * pulse;\n          \n          // 最终颜色\n          vec3 ringColor = color * (0.8 + 0.2 * pulse);\n          vec3 glowColor = color * 0.6;\n          \n          // 应用进度遮罩\n          ringColor *= progressMask;\n          glowColor *= progressMask;\n          \n          // 组合环形和辉光\n          gl_FragColor = vec4(ringColor * ring + glowColor * glow, ring * progressMask + glow * 0.7 * progressMask);\n        }\n      `\n    };\n  }, [probability]);\n\n  // 动画更新\n  useFrame(({\n    clock\n  }) => {\n    if (materialRef.current) {\n      materialRef.current.uniforms.time.value = clock.getElapsedTime();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    rotation: [0, 0, -Math.PI / 2],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [2, 2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", {\n      ref: materialRef,\n      args: [shaderData],\n      transparent: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n// 获取基于概率的颜色\n_s(RingProgress, \"G9+5D8UVszpFaGGTkRTIzq+RG8Q=\", false, function () {\n  return [useFrame];\n});\n_c = RingProgress;\nconst getColorFromProbability = probability => {\n  if (probability < 30) return '#4CAF50'; // 绿色 - 低风险\n  if (probability < 70) return '#FF9800'; // 橙色 - 中风险\n  return '#F44336'; // 红色 - 高风险\n};\n\n// 粒子系统\nconst ParticleSystem = ({\n  probability\n}) => {\n  _s2();\n  const particlesRef = useRef(null);\n\n  // 粒子数量和速度基于概率\n  const particleCount = useMemo(() => Math.floor(probability * 1.5) + 20, [probability]);\n  const particleSpeed = useMemo(() => 0.2 + probability / 100 * 0.8, [probability]);\n\n  // 创建粒子\n  const [positions, colors] = useMemo(() => {\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    const color = new THREE.Color(getColorFromProbability(probability));\n    for (let i = 0; i < particleCount; i++) {\n      // 随机位置，但集中在圆环附近\n      const angle = Math.random() * Math.PI * 2;\n      const radius = 0.35 + Math.random() * 0.1; // 环形区域\n\n      const i3 = i * 3;\n      positions[i3] = Math.cos(angle) * radius;\n      positions[i3 + 1] = Math.sin(angle) * radius;\n      positions[i3 + 2] = (Math.random() - 0.5) * 0.1;\n\n      // 颜色\n      colors[i3] = color.r;\n      colors[i3 + 1] = color.g;\n      colors[i3 + 2] = color.b;\n    }\n    return [positions, colors];\n  }, [particleCount, probability]);\n\n  // 动画更新\n  useFrame(({\n    clock\n  }) => {\n    if (particlesRef.current) {\n      const time = clock.getElapsedTime();\n      const positions = particlesRef.current.geometry.attributes.position.array;\n      for (let i = 0; i < particleCount; i++) {\n        const i3 = i * 3;\n        const x = positions[i3];\n        const y = positions[i3 + 1];\n\n        // 计算当前角度\n        let angle = Math.atan2(y, x);\n        const radius = Math.sqrt(x * x + y * y);\n\n        // 更新角度\n        angle += particleSpeed * 0.01 * (1 + Math.sin(time + i * 0.1));\n\n        // 更新位置\n        positions[i3] = Math.cos(angle) * radius;\n        positions[i3 + 1] = Math.sin(angle) * radius;\n      }\n      particlesRef.current.geometry.attributes.position.needsUpdate = true;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"points\", {\n    ref: particlesRef,\n    children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n      children: [/*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n        attach: \"attributes-position\",\n        count: particleCount,\n        array: positions,\n        itemSize: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n        attach: \"attributes-color\",\n        count: particleCount,\n        array: colors,\n        itemSize: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointsMaterial\", {\n      size: 0.03,\n      vertexColors: true,\n      transparent: true,\n      opacity: 0.8,\n      blending: THREE.AdditiveBlending\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s2(ParticleSystem, \"6EHoIaVtOqGkVwyIEKCEGRgeQzc=\", false, function () {\n  return [useFrame];\n});\n_c2 = ParticleSystem;\nconst ProbabilityMeter = ({\n  probability\n}) => {\n  _s3();\n  // 获取颜色\n  const getColor = useCallback(() => {\n    return getColorFromProbability(probability);\n  }, [probability]);\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    className: \"probability-meter\",\n    initial: {\n      opacity: 0,\n      scale: 0.8\n    },\n    animate: {\n      opacity: 1,\n      scale: 1\n    },\n    transition: {\n      duration: 0.8,\n      delay: 0.2\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"AI\\u5F71\\u54CD\\u7A0B\\u5EA6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meter-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meter-3d\",\n        style: {\n          height: '200px',\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Canvas, {\n          camera: {\n            position: [0, 0, 2]\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n            intensity: 0.5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(RingProgress, {\n            probability: probability\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ParticleSystem, {\n            probability: probability\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"probability-value\",\n          style: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            fontSize: '2.5rem',\n            fontWeight: 'bold',\n            color: getColor(),\n            textShadow: `0 0 10px ${getColor()}80`\n          },\n          children: [probability, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"probability-label\",\n        style: {\n          textAlign: 'center',\n          marginTop: '1rem',\n          fontSize: '1.1rem',\n          color: getColor()\n        },\n        children: probability < 30 ? '低度影响' : probability < 70 ? '中度影响' : '高度影响'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s3(ProbabilityMeter, \"iADFZRkBfqCw7HEJGwfovAVssvw=\");\n_c3 = ProbabilityMeter;\nexport default ProbabilityMeter;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"RingProgress\");\n$RefreshReg$(_c2, \"ParticleSystem\");\n$RefreshReg$(_c3, \"ProbabilityMeter\");","map":{"version":3,"names":["React","useCallback","useMemo","useRef","motion","THREE","Canvas","useFrame","jsxDEV","_jsxDEV","RingProgress","probability","_s","meshRef","materialRef","shaderData","uniforms","time","value","progress","color","Color","getColorFromProbability","vertexShader","fragmentShader","clock","current","getElapsedTime","rotation","Math","PI","children","args","fileName","_jsxFileName","lineNumber","columnNumber","ref","transparent","_c","ParticleSystem","_s2","particlesRef","particleCount","floor","particleSpeed","positions","colors","Float32Array","i","angle","random","radius","i3","cos","sin","r","g","b","geometry","attributes","position","array","x","y","atan2","sqrt","needsUpdate","attach","count","itemSize","size","vertexColors","opacity","blending","AdditiveBlending","_c2","ProbabilityMeter","_s3","getColor","div","className","initial","scale","animate","transition","duration","delay","style","height","camera","intensity","top","left","transform","fontSize","fontWeight","textShadow","textAlign","marginTop","_c3","$RefreshReg$"],"sources":["/Users/linjia/code/change-profession-fronted/src/components/ProbabilityMeter.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useMemo, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport * as THREE from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\n\ninterface ProbabilityMeterProps {\n  probability: number; // 0-100\n}\n\ninterface Particle {\n  id: number;\n  angle: number;\n  distance: number;\n  size: number;\n  speed: number;\n  pulse: number;\n}\n\n// 3D环形进度条组件\nconst RingProgress: React.FC<{ probability: number }> = ({ probability }) => {\n  const meshRef = useRef<THREE.Mesh>(null);\n  const materialRef = useRef<THREE.ShaderMaterial>(null);\n  \n  // 创建自定义着色器材质\n  const shaderData = useMemo(() => {\n    return {\n      uniforms: {\n        time: { value: 0 },\n        progress: { value: probability / 100 },\n        color: { value: new THREE.Color(getColorFromProbability(probability)) }\n      },\n      vertexShader: `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform float time;\n        uniform float progress;\n        uniform vec3 color;\n        varying vec2 vUv;\n        \n        void main() {\n          // 计算当前点到圆心的距离\n          vec2 center = vec2(0.5, 0.5);\n          float dist = distance(vUv, center);\n          \n          // 创建环形\n          float ring = smoothstep(0.3, 0.31, dist) * smoothstep(0.4, 0.39, dist);\n          \n          // 创建进度效果\n          float angle = atan(vUv.y - 0.5, vUv.x - 0.5);\n          angle = angle < 0.0 ? angle + 6.28318 : angle;\n          float progressAngle = progress * 6.28318;\n          float progressMask = step(angle, progressAngle);\n          \n          // 添加脉冲效果\n          float pulse = 0.5 + 0.5 * sin(time * 3.0 + dist * 10.0);\n          float glow = smoothstep(0.35, 0.36, dist) * smoothstep(0.38, 0.37, dist) * pulse;\n          \n          // 最终颜色\n          vec3 ringColor = color * (0.8 + 0.2 * pulse);\n          vec3 glowColor = color * 0.6;\n          \n          // 应用进度遮罩\n          ringColor *= progressMask;\n          glowColor *= progressMask;\n          \n          // 组合环形和辉光\n          gl_FragColor = vec4(ringColor * ring + glowColor * glow, ring * progressMask + glow * 0.7 * progressMask);\n        }\n      `\n    };\n  }, [probability]);\n  \n  // 动画更新\n  useFrame(({ clock }) => {\n    if (materialRef.current) {\n      materialRef.current.uniforms.time.value = clock.getElapsedTime();\n    }\n  });\n  \n  return (\n    <mesh rotation={[0, 0, -Math.PI / 2]}>\n      <planeGeometry args={[2, 2]} />\n      <shaderMaterial \n        ref={materialRef}\n        args={[shaderData]}\n        transparent={true}\n      />\n    </mesh>\n  );\n};\n\n// 获取基于概率的颜色\nconst getColorFromProbability = (probability: number): string => {\n  if (probability < 30) return '#4CAF50'; // 绿色 - 低风险\n  if (probability < 70) return '#FF9800'; // 橙色 - 中风险\n  return '#F44336'; // 红色 - 高风险\n};\n\n// 粒子系统\nconst ParticleSystem: React.FC<{ probability: number }> = ({ probability }) => {\n  const particlesRef = useRef<THREE.Points>(null);\n  \n  // 粒子数量和速度基于概率\n  const particleCount = useMemo(() => Math.floor(probability * 1.5) + 20, [probability]);\n  const particleSpeed = useMemo(() => 0.2 + (probability / 100) * 0.8, [probability]);\n  \n  // 创建粒子\n  const [positions, colors] = useMemo(() => {\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    const color = new THREE.Color(getColorFromProbability(probability));\n    \n    for (let i = 0; i < particleCount; i++) {\n      // 随机位置，但集中在圆环附近\n      const angle = Math.random() * Math.PI * 2;\n      const radius = 0.35 + Math.random() * 0.1; // 环形区域\n      \n      const i3 = i * 3;\n      positions[i3] = Math.cos(angle) * radius;\n      positions[i3 + 1] = Math.sin(angle) * radius;\n      positions[i3 + 2] = (Math.random() - 0.5) * 0.1;\n      \n      // 颜色\n      colors[i3] = color.r;\n      colors[i3 + 1] = color.g;\n      colors[i3 + 2] = color.b;\n    }\n    \n    return [positions, colors];\n  }, [particleCount, probability]);\n  \n  // 动画更新\n  useFrame(({ clock }) => {\n    if (particlesRef.current) {\n      const time = clock.getElapsedTime();\n      const positions = particlesRef.current.geometry.attributes.position.array as Float32Array;\n      \n      for (let i = 0; i < particleCount; i++) {\n        const i3 = i * 3;\n        const x = positions[i3];\n        const y = positions[i3 + 1];\n        \n        // 计算当前角度\n        let angle = Math.atan2(y, x);\n        const radius = Math.sqrt(x * x + y * y);\n        \n        // 更新角度\n        angle += particleSpeed * 0.01 * (1 + Math.sin(time + i * 0.1));\n        \n        // 更新位置\n        positions[i3] = Math.cos(angle) * radius;\n        positions[i3 + 1] = Math.sin(angle) * radius;\n      }\n      \n      particlesRef.current.geometry.attributes.position.needsUpdate = true;\n    }\n  });\n  \n  return (\n    <points ref={particlesRef}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          count={particleCount}\n          array={positions}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attach=\"attributes-color\"\n          count={particleCount}\n          array={colors}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial \n        size={0.03} \n        vertexColors \n        transparent \n        opacity={0.8}\n        blending={THREE.AdditiveBlending}\n      />\n    </points>\n  );\n};\n\nconst ProbabilityMeter: React.FC<ProbabilityMeterProps> = ({ probability }) => {\n  // 获取颜色\n  const getColor = useCallback(() => {\n    return getColorFromProbability(probability);\n  }, [probability]);\n  \n  return (\n    <motion.div \n      className=\"probability-meter\"\n      initial={{ opacity: 0, scale: 0.8 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.8, delay: 0.2 }}\n    >\n      <h3>AI影响程度</h3>\n      <div className=\"meter-container\">\n        <div className=\"meter-3d\" style={{ height: '200px', position: 'relative' }}>\n          <Canvas camera={{ position: [0, 0, 2] }}>\n            <ambientLight intensity={0.5} />\n            <RingProgress probability={probability} />\n            <ParticleSystem probability={probability} />\n          </Canvas>\n          \n          <div className=\"probability-value\" style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            fontSize: '2.5rem',\n            fontWeight: 'bold',\n            color: getColor(),\n            textShadow: `0 0 10px ${getColor()}80`\n          }}>\n            {probability}%\n          </div>\n        </div>\n        \n        <div className=\"probability-label\" style={{\n          textAlign: 'center',\n          marginTop: '1rem',\n          fontSize: '1.1rem',\n          color: getColor()\n        }}>\n          {probability < 30 ? '低度影响' : \n           probability < 70 ? '中度影响' : '高度影响'}\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default ProbabilityMeter; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}